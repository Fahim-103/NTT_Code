#ifndef __NTTSUB_H__
#define __NTTSUB_H__



#include <adf.h>
//#include "twiddle.h"

#include "aie_api/aie.hpp"
#include "aie_api/utils.hpp"
#include "aie_api/aie_adf.hpp"
#include "aie_api/operators.hpp"


//#define rnd_floor 0

inline __attribute__((always_inline)) v4int32 twdl_mod_mul_4 ( v4int32 m, v4int32 t){   // lane by lane twidl multiplication

	aie::mask<4> msk_lt;
	aie::vector<int32,4>  mlt, mlt_con, mlt_mod, r, p;

	r=aie::broadcast<int32,4>(349496);
	p=aie::broadcast<int32,4>(12289);

	mlt = srs(mul(m, t),0);

	//modular_ntt_4 //modulus sub generation for mod = m - q [ ( m * r ) >> 32 ]
	mlt_con = srs(mul(srs(mul(mlt,r),32),p),0) ;
	mlt_mod   = mlt - mlt_con;


	return mlt_mod;
}


inline __attribute__((always_inline)) v4int32 twdl_mod_sub_4 ( v4int32 m, v4int32 pn){   // checks if the radx-4 output is negative and performs mod

	aie::mask<4> msk_lt;
	aie::vector<int32,4> m_in, m_p, msel, r, p, m_mod, m_con;

	r=aie::broadcast<int32,4>(349496);
	p=aie::broadcast<int32,4>(12289);

	// m positive or negative, i.e. m or m+p // lane selection
	m_in = m;
	m_p = m_in+ pn;
	msk_lt=aie::lt(m_in,(int32)0);
	msel=aie::select(m_in,m_p,msk_lt);


	//modular_ntt_4 //mod = m - q [ ( m * r ) >> 32 ]
	m_con = srs(mul(srs(mul(msel,r),32),p),0) ; /////////can be problem
	m_mod   = msel - m_con;

	return m_mod;
}



inline __attribute__((always_inline)) void stage1_0_ntt (int32 * restrict x, int32 * restrict tw,
														  int32 * restrict y){


	v4int32 * restrict pi0 = (v4int32 * restrict)  x;
	v4int32 * restrict pi1 = (v4int32 * restrict) (x + 256);
	v4int32 * restrict pi2 = (v4int32 * restrict) (x + 512);
	v4int32 * restrict pi3 = (v4int32 * restrict) (x + 768);


	v4int32 * restrict po0 = (v4int32 * restrict)  y;
	v4int32 * restrict po1 = (v4int32 * restrict) (y + 256);
	v4int32 * restrict po2 = (v4int32 * restrict) (y + 512);
	v4int32 * restrict po3 = (v4int32 * restrict) (y + 768);

	//v4int32 * restrict tw0 = (v4int32 * restrict)  tw;
	v4int32 * restrict tw1 = (v4int32 * restrict) (tw );
	v4int32 * restrict tw2 = (v4int32 * restrict) (tw + 256);
	v4int32 * restrict tw3 = (v4int32 * restrict) (tw + 512);


	// 4-point NTT twiddle
	int32 const chess_storage(%chess_alignof(v4int32)) tw_sub[8] =   {1, 7506, -1, -7506,
											                      	  0,  0,   0,  0}; //for zbuff twiddle for 4-point NTT (w_4)^1 = (w_16)^4 = (w_1024)^256

	v8int32 zbuff = *((v8int32 *)tw_sub);
	//===========================================================================================================

	//modular pre-requirements
	aie::vector<int32,4> p1, p2;

	p1 = aie::broadcast<int32,4>(24578); // 2q
	p2 = aie::broadcast<int32,4>(92253523); // q(w+1) ; w is from zbuff


	v4int32 m0, m1, m2, m3;
	v4int32 mr0, mr1, mr2, mr3;
	aie::vector<int32,16> chess_storage(xa) x1buff;
	//aie::vector<int32,16> chess_storage(xd) x1buff;

	//===========================================================================================================

	x1buff = upd_v(x1buff, 0, *pi0++);
	x1buff = upd_v(x1buff, 1, *pi1++);
	x1buff = upd_v(x1buff, 3, *pi2++);
	x1buff = upd_v(x1buff, 2, *pi3++);

	aie::print (x1buff, true, x1buff);

	// block of first second third fourt points, with tw multiplication

	m0 = srs(lmul4_sym     (x1buff, 0, 0x3210, 4, 12, zbuff, 0, 0x0000, 0) , 0) ; //first points of 4-blocks 4-point
	m1 = srs(lmul4_antisym (x1buff, 0, 0x3210, 4, 12, zbuff, 0, 0x0000, 1) , 0) ;

	m2 = srs(lmul4_sym     (x1buff, 0, 0x3210, 4, 12, zbuff, 0, 0x0000, 2)  ,0) ;
	m3 = srs(lmul4_antisym (x1buff, 0, 0x3210, 4, 12, zbuff, 0, 0x0000, 3)  ,0) ;

	//===========================================================================================================

	//modulus sub generation for mod = t - q [ (16711935 * t) >> 32 ]

	mr0 = twdl_mod_sub_4(m0, p1);
	//mr0 = twdl_mod_mul_4(mr0, *t1++);  // not required for second step

	mr1 = twdl_mod_sub_4(m1, p2); // +p if negative
	mr1 = twdl_mod_mul_4(mr1, *tw1++); // tw multiplication, +1 if multp is negative

	mr2 = twdl_mod_sub_4(m2, p1);
	mr2 = twdl_mod_mul_4(mr2, *tw2++);

	mr3 = twdl_mod_sub_4(m3, p2);
	mr3 = twdl_mod_mul_4(mr3, *tw3++);


	}

}








#endif
