#ifndef __NTTSUB_H__
#define __NTTSUB_H__


#include <adf.h>
//#include "twiddle.h"

#include "aie_api/aie.hpp"
#include "aie_api/utils.hpp"
#include "aie_api/aie_adf.hpp"
#include "aie_api/operators.hpp"


//#define rnd_floor 0

inline __attribute__((always_inline)) v4int32 modular_ntt_4 ( v4int32 v){

	//modulus sub generation for mod = t - q [ (r * t) >> 32 ]

	int32 rr[4] = {65535, 65535, 65535, 65535};
	v4int32  r = *((v4int32*)rr);

	int32 po[8] = {65537, 65537, 65537, 65537, 65537, 65537, 65537, 65537};  // q
	v4int32 p0 = *((v4int32*)po);  // q

	v4int32 vcon, vr;
	vcon = srs(mul(srs(mul(v,r),32),p0),0) ;
	vr   = v - vcon;

	return vr;

}


inline __attribute__((always_inline)) v4int32 twdl_mod_mul_4 ( v4int32 m, v4int32 t){   // lane by lane twidl multiplication

	aie::mask<4> msk_lt;
	aie::vector<int32,4> c1, mout, mlt, mlt_con, mlt_mod, mlt_mod_c1, r, p;

	r=aie::broadcast<int32,4>(65535);
	p=aie::broadcast<int32,4>(65537);
	c1=aie::broadcast<int32,4>(1);

	mlt = srs(mul(m, t),0);

	//modular_ntt_4 //modulus sub generation for mod = m - q [ ( m * r ) >> 32 ]
	mlt_con = srs(mul(srs(mul(mlt,r),32),p),0) ;
	mlt_mod   = mlt - mlt_con;

	//lane selection
	mlt_mod_c1 = mlt_mod + c1;
	msk_lt=aie::lt(mlt,(int32)0);  //compare each element, true ifv1[i]<v2[i]
	mout=aie::select(mlt_mod,(mlt_mod_c1),msk_lt);

	return mout;
}


inline __attribute__((always_inline)) v4int32 twdl_mod_sub_4 ( v4int32 m, v4int32 pn){   // checks if the radx-4 output is negative and performs mod

	aie::mask<4> msk_lt;
	aie::vector<int32,4> mout, mlt, mlt_con, mlt_mod, mlt_mod_c1, r, p;

	r=aie::broadcast<int32,4>(65535);
	p=aie::broadcast<int32,4>(65537);

	// m positive or negative, i.e. m or m+p // lane selection
	m_p = m + pn;
	msk_lt=aie::lt(m,(int32)0);
	msel=aie::select(m,m_p,msk_lt);


	//modular_ntt_4 //mod = m - q [ ( m * r ) >> 32 ]
	m_con = srs(mul(srs(mul(msel,r),32),p),0) ; /////////can be problem
	m_mod   = msel - m_con;


	return m_mod;
}


 inline __attribute__((always_inline)) void stage1_0_ntt ( int32 * restrict x,  int32 * restrict y,
														int32 * restrict tw1){




	v4int32 * xx = (v4int32 *) x; //16 byte 4 elem update
	v4int32 * yy = (v4int32 *) y;

	v4int32 * t1 = (v4int32 *) tw1;
/*

	v4int32 ta = *t1++;
	v4int32 tb = *t1++;
	v4int32 tc = *t1++;
	v4int32 td = *t1;

*/

	v16int32 x1buff;

	// update x1buff with proper permutation

	x1buff = upd_v(x1buff, 0, *xx++);
	x1buff = upd_v(x1buff, 1, *xx++);
	x1buff = upd_v(x1buff, 3, *xx++);
	x1buff = upd_v(x1buff, 2, *xx++);

	// 4-point NTT twiddle
	int32 const chess_storage(%chess_alignof(v4int32)) tw[8] =   {1, 256, -1, -256,
											                      0,  0,   0,  0}; //for zbuff twiddle for 4-point NTT (w_4)^1 = (w_16)^4 = 16

	v8int32 zbuff = *((v8int32 *)tw); ////////

	// 4-point NTT stage00

	int32 const chess_storage(%chess_alignof(v4int32)) tw_sub[16] =   { 1,  1,      1,      1,
																		1,  64513,  16384,  65521,
																		1,  65521,  61441,  256,
																		1,  16384,  1024,   61441
																	   };

	v4int32 * t_sub = (v4int32 *) tw_sub;
	tsub++; // for mr0 all 1

/*

	v4int32 t0_sub = *t_sub++;
	v4int32 t1_sub = *t_sub++;
	v4int32 t2_sub = *t_sub++;
	v4int32 t3_sub = *t_sub;

*/

	//modular pre-requirements
	aie::vector<int32,4> p1, p2;

	p1 = aie::broadcast<int32,4>(131074); // 2q
	p2 = aie::broadcast<int32,4>(16843009); // q(w+1) ; w is from zbuff


	v4int32 m0, m1, m2, m3;

	m0 = srs(lmul4_sym     (x1buff, 0, 0x2310, 4, 12, zbuff, 0, 0x0000, 0) , 0);
	m1 = srs(lmul4_antisym (x1buff, 0, 0x2310, 4, 12, zbuff, 0, 0x0000, 1) , 0); //first points of 4-blocks 4-point
	m2 = srs(lmul4_sym     (x1buff, 0, 0x2310, 4, 12, zbuff, 0, 0x0000, 2)  ,0);
	m3 = srs(lmul4_antisym (x1buff, 0, 0x2310, 4, 12, zbuff, 0, 0x0000, 3)  ,0);

	//==================================================================================================
	//modulus sub generation for mod = t - q [ (r * t) >> 32 ]

	v4int32 mr0, mr1, mr2, mr3;

	mr0 = twdl_mod_sub_4(m0, p1);


	mr1 = twdl_mod_sub_4(m1, p2); // +p if negative
	mr1 = twdl_mod_mul_4(mr1, *tsub++); // tw multiplication, +1 if multp is negative

	mr2 = twdl_mod_sub_4(m2, p1);
	mr2 = twdl_mod_mul_4(mr2, *tsub++);

	mr3 = twdl_mod_sub_4(m3, p2);
	mr3 = twdl_mod_mul_4(mr3, *tsub);
	//////////////////////////////	``

	/////next stage starts

	v16int32 temp_buff1, temp_buff2;

	temp_buff1 = upd_v(temp_buff1, 0, mr0);
	temp_buff1 = upd_v(temp_buff1, 1, mr1);
	temp_buff1 = upd_v(temp_buff1, 2, mr2);
	temp_buff1 = upd_v(temp_buff1, 3, mr3);

	//input vector prepare
	aie::vector<int32,16> x_vec = temp_buff1;

	//aie::print(x_vec, true, "x_vec ");

	temp_buff2 = aie::transpose(x_vec, 4, 4) ;


	// next 4-point NTT

	m0 = srs(lmul4_sym     (temp_buff2, 0, 0x3210, 4, 12, zbuff, 0, 0x0000, 0) , 0) ; //first points of 4-blocks 4-point
	m1 = srs(lmul4_antisym (temp_buff2, 0, 0x3210, 4, 12, zbuff, 0, 0x0000, 1) , 0) ;

	m2 = srs(lmul4_sym     (temp_buff2, 0, 0x3210, 4, 12, zbuff, 0, 0x0000, 2)  ,0) ;
	m3 = srs(lmul4_antisym (temp_buff2, 0, 0x3210, 4, 12, zbuff, 0, 0x0000, 3)  ,0) ;




	//modulus sub generation for mod = t - q [ (16711935 * t) >> 32 ]

	mr0 = twdl_mod_sub_4(m0, p1);


	mr1 = twdl_mod_sub_4(m1, p2); // +p if negative
	mr1 = twdl_mod_mul_4(mr1, *t1++); // tw multiplication, +1 if multp is negative

	mr2 = twdl_mod_sub_4(m2, p1);
	mr2 = twdl_mod_mul_4(mr2, *t1++);

	mr3 = twdl_mod_sub_4(m3, p2);
	mr3 = twdl_mod_mul_4(mr3, *t1);
	/////////////////////////////////

	*yy++ = mr0;
	*yy++ = mr1;
	*yy++ = mr2;
	*yy++ = mr3;

}






#endif
