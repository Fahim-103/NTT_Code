//taking two 16 bit buffers (xbuff, zbuff) and multiplying

//#include <adf.h>
#include "nttsub11.h"
#include "include.h"
#include "twiddle.h"



using namespace adf;

void test_multiply (input_window_int32  * restrict inputx,
			        output_window_int32 * restrict outputy){



	cint32_t chess_storage(%chess_alignof(v4cint32)) tw0[4] ={{ 32767,     0},{ 23170,-23170},{     0,-32768},{-23170,-23170}};
	cint32_t chess_storage(%chess_alignof(v4cint32)) tw1[4] ={{ 32767,     0},{ 30274,-12540},{ 23170,-23170},{ 12540,-30274}};


	aie::vector<int16,8>  w, wcn , t, xx, yy;
	aie::vector<int32,8> x, y, z ;

	w=aie::broadcast<int16,8>(65535);  // 2147483648 4294967285
	wcn=aie::broadcast<int16,8>(9);
	t=aie::broadcast<int16,8>(1);


	get_MD 	(0);

	x = lsrs(mul(w,t), 0);
	y = lsrs(mul(w,t),32);
	//z = x -y;


	aie::print(x, true, "x ");
	aie::print(y, true, "y ");
	aie::print(z, true, "z ");




}

