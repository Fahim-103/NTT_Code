//taking two 16 bit buffers (xbuff, zbuff) and multiplying

//#include <adf.h>
#include "nttsub11.h"
#include "include.h"
#include "twiddle.h"



using namespace adf;

void test_multiply (input_window_int32  * restrict inputx,
			        output_window_int32 * restrict outputy){



	cint32_t chess_storage(%chess_alignof(v4cint32)) tw0[4] ={{ 32767,     0},{ 23170,-23170},{     0,-32768},{-23170,-23170}};
	cint32_t chess_storage(%chess_alignof(v4cint32)) tw1[4] ={{ 32767,     0},{ 30274,-12540},{ 23170,-23170},{ 12540,-30274}};


	aie::vector<int32,4>  r, p ;

	r=aie::broadcast<int32,4>(2);
	p=aie::broadcast<int32,4>(3);

	v4acc80 x, y, z;

	x = mul(r,p);
	y = mul(r,p);



	//r=aie::broadcast<int64,4>(65535);
	//p=aie::broadcast<int64,4>(65537);

	z = x - r;




}

