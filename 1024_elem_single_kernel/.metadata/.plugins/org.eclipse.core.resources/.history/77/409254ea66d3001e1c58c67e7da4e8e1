#ifndef __NTTSUB_H__
#define __NTTSUB_H__


#include <adf.h>
//#include "twiddle.h"

#include "aie_api/aie.hpp"
#include "aie_api/utils.hpp"
#include "aie_api/aie_adf.hpp"
#include "aie_api/operators.hpp"


//#define rnd_floor 0


inline __attribute__((always_inline)) v4int32 modular_ntt ( v4int32 v){

	//modulus sub generation for mod = t - q [ (65535 * t) >> 32 ]

	int32 rr[4] = {65535, 65535, 65535, 65535};  //w'/q
	v4int32  r = *((v4int32*)rr);

	int32 po[8] = {65537, 65537, 65537, 65537, 65537, 65537, 65537, 65537};  // q
	v4int32 p0 = *((v4int32*)po);  // q

	v4int32 vcon, vr;
	//vcon = srs(mul(srs(mul(v,r),32),p0),0) ;
	vcon = srs(mul(v,r),32) ;

/*
	aie::vector<int32,4> vtest = v;
	aie::print(vtest, true, "in_v: ");

	vtest = vcon;
	aie::print(vtest, true, "vcon: ");

*/

	vr   = v - vcon;

	return vr;

}

inline __attribute__((always_inline)) void stage0_ntt ( int32 * restrict x,  int32 * restrict y,
														int32 * restrict tw1, int32 * restrict tw2, int32 * restrict tw3){

	unsigned int a =  get_srs_sat();
	printf("mode sat: %u \n", a);


	v8int32 * xx = (v8int32 *) x; //16 byte 4 elem update
	v4int32 * yy = (v4int32 *) y;

	v4int32 * t1 = (v4int32 *) tw1;
	v4int32 * t2 = (v4int32 *) tw2;
	v4int32 * t3 = (v4int32 *) tw3;

	v32int32 x1buff;

	// 4-point NTT twiddle
	int32 const chess_storage(%chess_alignof(v4int32)) tw[8] =   {1, 256, -1, -256,
											                      0,  0,   0,  0}; //for zbuff twiddle for 4-point NTT (w_4)^1 = (w_16)^4 = 16
	v8int32 * zz = (v8int32 *)tw; ////////
	v8int32 zbuff = *zz;

	//modular pre-requirements
	int32 pa[4] = {131074, 131074, 131074, 131074};  // 2q
	int32 pb[4] = {16843009, 16843009, 16843009, 16843009}; // q(w+1) ; w is from zbuff
	v4int32 p1 = *((v4int32*)pa);  // 2q
	v4int32 p2 = *((v4int32*)pb);  // q(w+1) ; w is from zbuff

	v4int32 m0, m1, m2, m3;
	v4int32 mr0, mr1, mr2, mr3;


	v4int32 m00, m10, m20, m30;
	v4int32 mr00, mr10, mr20, mr30;


	//for (int i = 0; i < 32; i++){

		x1buff = upd_w(x1buff, 0, *xx); xx += 32;
		x1buff = upd_w(x1buff, 1, *xx); xx += 32;
		x1buff = upd_w(x1buff, 3, *xx); xx += 32;
		x1buff = upd_w(x1buff, 2, *xx); xx -= 95;
		//aie::vector<int32,32> x_vec = x1buff;
		//aie::print(x_vec, true, "x_vec ");

		// block of first second third fourt points, with tw multiplication




		m0 =           srs(lmul4_sym     (x1buff, 0, 0x3210, 8, 24, zbuff, 0, 0x0000, 0) , 0);
		m1 = srs(lmul4_antisym (x1buff, 0, 0x3210, 8, 24, zbuff, 0, 0x0000, 1) , 0) + p2  ; //first points of 4-blocks 4-point
		m2 = srs(lmul4_sym     (x1buff, 0, 0x3210, 8, 24, zbuff, 0, 0x0000, 2)  ,0) + p1  ;
		m3 = srs(lmul4_antisym (x1buff, 0, 0x3210, 8, 24, zbuff, 0, 0x0000, 3)  ,0) + p2 ;


		aie::vector<int32,4> v1,v2;
		v1 = m1; v2 = m2;
		aie::mask<4> msk_lt=aie::lt(v1,v2);//compare each element, true ifv1[i]<v2[i]

/*
		msk_lt.set(0);//set bit 0 to be true
		msk_lt.clear(1);//set bit 1 to be false
		aie::vector<int32,16> v_s=aie::select(v1,v2,msk_lt); //element-wise		selection. select v2[i] if msk_lt[i] is true; select v1[i] if msk_lt[i] is	false;
*/


/*

		aie::vector<int32,4> vtest = m1;
		aie::print(vtest, true, "m1 ");
		vtest = m2;
		aie::print(vtest, true, "m2: ");
		vtest = m3;
		aie::print(vtest, true, "m3: ");
*/







		//modulus sub generation for mod = t - q [ (65535 * t) >> 32 ]
/*

		mr0 = modular_ntt(m0); *yy = mr0; yy +=64;
		mr1 = modular_ntt(srs(mul(modular_ntt(m1), *t1++),0))  ; *yy = mr1; yy +=64;
		mr2 = modular_ntt(srs(mul(modular_ntt(m2), *t2++),0))  ; *yy = mr2; yy +=64;
		mr3 = modular_ntt(srs(mul(modular_ntt(m3), *t3++),0))  ; *yy = mr3; yy -=191;
*/



		//aie::vector<int32,4> vtest = mr2;
		//aie::print(vtest, true, "mr2 ");


		//next four by four points



		m00 =           srs(lmul4_sym     (x1buff, 4, 0x3210, 8, 28, zbuff, 0, 0x0000, 0) , 0);
		m10 = srs(lmul4_antisym (x1buff, 4, 0x3210, 8, 28, zbuff, 0, 0x0000, 1) , 0) + p2 ; //first points of 4-blocks 4-point
		m20 = srs(lmul4_sym     (x1buff, 4, 0x3210, 8, 28, zbuff, 0, 0x0000, 2)  ,0) + p1 ;
		m30 = srs(lmul4_antisym (x1buff, 4, 0x3210, 8, 28, zbuff, 0, 0x0000, 3)  ,0) + p2 ;






		//modulus sub generation for mod = t - q [ (65535 * t) >> 32 ]

		mr00 = modular_ntt(m00); *yy = mr00; yy +=64;
		mr10 = modular_ntt(srs(mul(modular_ntt(m10), *t1++),0)); *yy = mr10; yy +=64;
		mr20 = modular_ntt(srs(mul(modular_ntt(m20), *t2++),0)); *yy = mr20; yy +=64;
		mr30 = modular_ntt(srs(mul(modular_ntt(m30), *t3++),0)); *yy = mr30; yy -=191;

		//vtest = mr20;
		//aie::print(vtest, true, "mr20 ");


	//}


}





#endif
